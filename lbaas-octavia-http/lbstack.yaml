heat_template_version: 2016-04-08
# SSH public Key file uploaded to Dashboard (Horizon) - RSA only
# 'openstack stack create -t lbstack.yaml --parameter key_name=<publicKeyName> <stackName>'

description: A Group of Load Balanced Servers

parameters:

  key_name:
    type: string
    constraints:
      - custom_constraint: nova.keypair
  app_port:
    type: number
    default: 80
    description: Port used by the servers
  flavor:
    type: string
    description: Flavor used for servers
    default: m1.tiny
    constraints:
      - custom_constraint: nova.flavor
  image:
    type: string
    description: Image used for servers
    default: Ubuntu Jammy 22.04 (2022-08-11)
    constraints:
      - custom_constraint: glance.image
  lb_port:
    type: number
    default: 80
    description: Port used by the load balancer
  public_network:
    type: string
    description: Network used by the load balancer
    default: ext-net 
  number_upstreams:
    type: string
    default: 4

resources:

  syseleven_net:
    type: OS::Neutron::Net
    properties: 
      name: syseleven-net

  syseleven_subnet:
    type: OS::Neutron::Subnet
    depends_on: [ syseleven_net ]
    properties:
      name: syseleven_subnet
      dns_nameservers:
        - 8.8.8.8 
        - 4.4.4.4
      network: {get_resource: syseleven_net}
      ip_version: 4
      cidr: 192.168.2.0/24
      allocation_pools:
      - {start: 192.168.2.10, end: 192.168.2.250}

  syseleven_router:
    type: OS::Neutron::Router
    depends_on: [ syseleven_subnet ]
    properties:
      external_gateway_info: {"network": { get_param: public_network }}

  router_subnet_connect:
    type: OS::Neutron::RouterInterface
    depends_on: [ syseleven_router ]
    properties:
      router: { get_resource: syseleven_router }
      subnet: { get_resource: syseleven_subnet }


  sec_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - remote_ip_prefix: 0.0.0.0/0
        protocol: tcp
        port_range_min: { get_param: app_port }
        port_range_max: { get_param: app_port }
      - remote_ip_prefix: 0.0.0.0/0
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - remote_ip_prefix: 0.0.0.0/0
        protocol: tcp
        port_range_min: 80
        port_range_max: 80

  monitor:
    type: OS::Octavia::HealthMonitor
    depends_on: [ pool ]
    properties:
      delay: 3
      type: HTTP 
      timeout: 3
      max_retries: 3
      pool: { get_resource: pool }

  pool:
    type: OS::Octavia::Pool
    depends_on: [ listener ]
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: listener }
      name:
        list_join: [ '-', [ { get_param: "OS::stack_name" }, 'pool' ]]

  listener:
    type: OS::Octavia::Listener
    depends_on: [ loadbalancer ]
    properties:
      loadbalancer: { get_resource: loadbalancer }
      protocol: HTTP
      protocol_port: { get_param: lb_port }
      name:
        list_join: [ '-', [ { get_param: "OS::stack_name" }, 'listener' ]]

  loadbalancer:
    depends_on: [ router_subnet_connect ]
    type: OS::Octavia::LoadBalancer
    properties:
      vip_subnet: { get_resource: syseleven_subnet }
      name:
        list_join: [ '-', [ { get_param: "OS::stack_name" }, 'lb' ]]


  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }
      port_id: { get_attr: [loadbalancer, vip_port_id ]}

# finally we define some backend servers

  ### upstream nodes as resource group ###
  #######################
  upstream_group:
    type: OS::Heat::ResourceGroup
    depends_on: [ router_subnet_connect, pool, sec_group ]
    properties:
      count: { get_param: number_upstreams } 
      resource_def: 
        type: upstreamserver.yaml
        properties:
          name: upstream%index%
          flavor: { get_param: flavor }
          image: { get_param: image }
          key_name: { get_param: key_name }
          net: { get_resource: syseleven_net }
          subnet: { get_resource: syseleven_subnet }
          pool: { get_resource: pool } 
          upstream_port: 80
          sec_group: { get_resource: sec_group }

outputs:

  lburl:
    value:
      str_replace:
        template: http://IP_ADDRESS:PORT
        params:
          IP_ADDRESS: { get_attr: [ floating_ip, floating_ip_address ] }
          PORT: { get_param: lb_port }
    description: >
      This URL is the "external" URL that can be used to access the load balancer.

