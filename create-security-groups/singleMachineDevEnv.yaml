heat_template_version: 2014-10-16

#
# you can deploy this template using the following command:
# 'openstack stack create -t singleMachineDevEnv.yaml --parameter key_name=<publicKeyName> --parameter ip_whitelist=<ipAddrRangInCIDR>'
#
# after successful stack creation you can login with 
# ssh -l ubuntu <externalIP> 
# 


description: Simple template to deploy a single compute instance
  with external network and associated security group.

parameters:
  key_name:
    type: string
    constraints:
      - custom_constraint: nova.keypair
    
  public_network:
    type: string
    default: ext-net
  ip_whitelist:
    type: string
    description: ip address or range in CIDR
    constraints:
      - custom_constraint: net_cidr


resources:
  allow_static_ip:
    type: OS::Neutron::SecurityGroup
    properties:
      description: allow incoming traffic only from specified IP.
      name: allow incoming traffic, tcp
      rules: [{direction: ingress, remote_ip_prefix: {get_param: ip_whitelist}, port_range_min: 1, port_range_max: 65535, protocol: tcp} ]

  secured_instance:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      image: Ubuntu Jammy 22.04 (2022-08-11)
      flavor: m1.tiny
      user_data_format: RAW
      networks:
        - port: { get_resource: example_port }

  example_port:
    type: OS::Neutron::Port
    properties:
      security_groups: [ get_resource: allow_static_ip ]
      network: { get_resource: example_net}

  example_net:
    type: OS::Neutron::Net
    properties: 
      name: example-net

  example_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: example_subnet
      dns_nameservers:
        - 8.8.8.8
        - 8.8.4.4
      network: {get_resource: example_net}
      ip_version: 4
      cidr: 10.0.0.0/8
      allocation_pools:
      - {start: 10.0.0.10, end: 10.0.0.250}

  example_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: {"network": { get_param: public_network }}

  router_subnet_connect:
    type: OS::Neutron::RouterInterface
    depends_on: [ example_subnet, example_router ]
    properties:
      router: { get_resource: example_router }
      subnet: { get_resource: example_subnet }

  example_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }
      port_id: { get_resource: example_port }
