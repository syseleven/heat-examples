heat_template_version: 2016-04-08
#
# You can deploy this template using the following command:
# 'openstack stack create -t clustersetup.yaml -e clustersetup-env.yaml <stack_name>'
#
# If you prefer to just start a small testing stack, you can change the *-env.yaml file
# to 'openstack stack create -t clustersetup.yaml -e clustersetup-env-testing-small.yaml <stack_name>'
#
# After successful stack creation you can login with 
# 'openstack server ssh --option "ForwardAgent=yes" -l syseleven servicehost0'
# From there you can jump to any of your nodes. An example:
# 'ssh lb0.node.consul'
#

description: A template to deploy and configure a loadbalanced server setup.

parameters:
  number_appservers: 
    type: string
    default: 4
  number_dbservers: 
    type: string
    default: 3
  number_servicehosts: 
    type: string
    default: 1
  public_network:
    type: string
  flavor_lb:
    type: string
    default: m1.micro
  flavor_appserver:
    type: string
    default: m1.micro
  flavor_dbserver:
    type: string
    default: m1.micro
  flavor_servicehost:
    type: string
    default: m1.micro
  image: 
    type: string
  consul_mastertoken_length:
    type: number
    default: 30
  consul_agenttoken_length:
    type: number
    default: 30
  ssh_keys:
    type: comma_delimited_list

resources:

  consul_mastertoken:
    type: OS::Heat::RandomString
    properties:
      length: {get_param: [consul_mastertoken_length]}

  consul_agenttoken:
    type: OS::Heat::RandomString
    properties:
      length: {get_param: [consul_agenttoken_length]}

  syseleven_net:
    type: OS::Neutron::Net
    properties: 
      name: syseleven-net

  syseleven_subnet:
    type: OS::Neutron::Subnet
    depends_on: [ syseleven_net ]
    properties:
      name: syseleven_subnet
      dns_nameservers:
        - 8.8.8.8
        - 8.8.4.4
      network: {get_resource: syseleven_net}
      ip_version: 4
      cidr: 192.168.2.0/24
      allocation_pools:
      - {start: 192.168.2.10, end: 192.168.2.250}

  syseleven_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: {"network": { get_param: public_network }}

  router_subnet_connect:
    type: OS::Neutron::RouterInterface
    depends_on: [ syseleven_router, syseleven_subnet ]
    properties:
      router: { get_resource: syseleven_router }
      subnet: { get_resource: syseleven_subnet }

  ### Service node as resource group ###
  #######################
  servicehost_group:
    type: OS::Heat::ResourceGroup
    depends_on: [ router_subnet_connect, consul_mastertoken, consul_agenttoken ]
    properties:
      count: { get_param: number_servicehosts } 
      resource_def: 
        type: servicehost.yaml
        properties:
          name: servicehost%index%
          flavor: { get_param: flavor_servicehost }
          image: { get_param: image }
          syseleven_net: { get_resource: syseleven_net }
          public_network: { get_param: public_network }
          consul_mastertoken: {get_attr: [consul_mastertoken, value]} 
<<<<<<< HEAD
          consul_agenttoken: {get_attr: [consul_agenttoken, value]}
=======
>>>>>>> master
          ssh_keys: { get_param: ssh_keys }

  ### LB Node as resource group ###
  #######################
  lb_group:
    type: OS::Heat::ResourceGroup
    depends_on: [ router_subnet_connect, consul_mastertoken, consul_agenttoken ]
    properties:
      count: 1 
      resource_def: 
        type: lb.yaml
        properties:
          name: lb%index%
          image: { get_param: image }
          flavor: { get_param: flavor_lb }
          syseleven_net: { get_resource: syseleven_net }
<<<<<<< HEAD
          consul_mastertoken: {get_attr: [consul_mastertoken, value]}
          consul_agenttoken: {get_attr: [consul_agenttoken, value]}
=======
          public_network: { get_param: public_network }
          consul_mastertoken: {get_attr: [consul_mastertoken, value]} 
>>>>>>> master
          ssh_keys: { get_param: ssh_keys }

  ### DBserver Nodes as resource group ###
  #######################
  dbserver_group:
    type: OS::Heat::ResourceGroup
    depends_on: [ router_subnet_connect, consul_mastertoken, consul_agenttoken ]
    properties:
      count: { get_param: number_dbservers } 
      resource_def: 
        type: dbserver.yaml
        properties:
          name: db%index%
          flavor: { get_param: flavor_dbserver }
          image: { get_param: image }
          syseleven_net: { get_resource: syseleven_net }
<<<<<<< HEAD
          public_network: { get_param: public_network }
          consul_mastertoken: {get_attr: [consul_mastertoken, value]}
          consul_agenttoken: {get_attr: [consul_agenttoken, value]}
=======
          consul_mastertoken: {get_attr: [consul_mastertoken, value]} 
>>>>>>> master
          ssh_keys: { get_param: ssh_keys }

  ### Appserver nodes as resource group ###
  #######################
  appserver_group:
    type: OS::Heat::ResourceGroup
<<<<<<< HEAD
    depends_on: [ router_subnet_connect, consul_mastertoken, consul_agenttoken ]
=======
    depends_on: [ router_subnet_connect ]
>>>>>>> master
    properties:
      count: { get_param: number_appservers } 
      resource_def: 
        type: server.yaml
        properties:
          name: app%index%
          flavor: { get_param: flavor_appserver }
          image: { get_param: image }
          syseleven_net: { get_resource: syseleven_net }
          consul_mastertoken: {get_attr: [consul_mastertoken, value]}
          consul_agenttoken: {get_attr: [consul_agenttoken, value]} 
          ssh_keys: { get_param: ssh_keys }

outputs:
  consul_master_token:
    value: {get_attr: [consul_mastertoken, value]} 
  consul_agenttoken:
    value: {get_attr: [consul_agenttoken, value]} 
