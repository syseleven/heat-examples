heat_template_version: ocata

description: A template to deploy and configure a loadbalanced server setup.

parameters:
  appserver_port:
    type: number
    default: 80
  image: 
    type: string
    default: Ubuntu Jammy 22.04 (2022-08-11)
    constraints:
      - custom_constraint: glance.image
  ssh_keys:
    type: comma_delimited_list
  os_username:
    type: string
    constraints:
      - length: { min: 1 }
  os_password:
    type: string
    hidden: true
    constraints:
      - length: { min: 1 }
  os_tenant_id:
    type: string
    constraints:
      - length: { min: 1 }

resources:
  net:
    type: OS::Neutron::Net
    properties:
      name: net

  subnet:
    type: OS::Neutron::Subnet
    depends_on: [ net ]
    properties:
      name: subnet
      dns_nameservers:
        - 8.8.8.8
        - 8.8.4.4
      network: {get_resource: net}
      ip_version: 4
      cidr: 172.16.32.0/24
      allocation_pools:
      - {start: 172.16.32.10, end: 172.16.32.254}

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: {"network": ext-net }

  router_subnet_connect:
    type: OS::Neutron::RouterInterface
    depends_on: [ router, subnet ]
    properties:
      router: { get_resource: router }
      subnet: { get_resource: subnet }

  loadbalancer:
    depends_on: [ router_subnet_connect ]
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
      vip_subnet: { get_resource: subnet }

  listener:
    type: OS::Neutron::LBaaS::Listener
    depends_on: [ loadbalancer ]
    properties:
      loadbalancer: { get_resource: loadbalancer }
      protocol: TCP 
      protocol_port: 80

  pool:
    type: OS::Neutron::LBaaS::Pool
    depends_on: [ listener ]
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: TCP 
      listener: { get_resource: listener }

  monitor:
    type: OS::Neutron::LBaaS::HealthMonitor
    depends_on: [ pool ]
    properties:
      delay: 3
      type: TCP 
      timeout: 3
      max_retries: 3
      pool: { get_resource: pool }


  sg_lb:
    type: OS::Neutron::SecurityGroup
    properties:
      description: allow incoming HTTP traffic from anywhere.
      name: allow HTTP and Prometheus traffic
      rules:
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 80, port_range_max: 80, protocol: tcp }
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, protocol: icmp }

  floating_ip_lb:
    type: OS::Neutron::FloatingIP
    depends_on: [ loadbalancer ]
    properties:
      floating_network: ext-net
      port_id: { get_attr: [loadbalancer, vip_port_id ]}

  anti-affinity_group:
    type: OS::Nova::ServerGroup
    properties:
      name: hosts on separate compute nodes
      policies:
        - anti-affinity

  scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: appserver_group}
      cooldown: 60
      scaling_adjustment: 1
  scale_down_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: appserver_group}
      cooldown: 60
      scaling_adjustment: '-1'

#  ### Appserver nodes as resource group ###
  appserver_group:
    type: OS::Heat::AutoScalingGroup
#    depends_on: [ sg_app ]
    properties:
      min_size: 1
      max_size: 10
      resource:
        type: appserver.yaml
        properties:
          name: app
          image: { get_param: image }
          network_id: { get_resource: net }
          subnet_id: { get_resource: subnet }
          ssh_keys: { get_param: ssh_keys }
          affinity_group: { get_resource: anti-affinity_group }
          backend_port: { get_param: appserver_port }
          pool_id: { get_resource: pool }
          heatstack_id: { get_param: 'OS::stack_id' }
          security_groups: [ { get_resource: sg_lb } ]

#  ### Prometheus as resource group ###
#  #######################
#
  sg_prometheus:
    type: OS::Neutron::SecurityGroup
    properties:
      description: allow accessing pports 22, 9100, 9090 9093.
      name: allow prometheus traffic
      rules:
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 22, port_range_max: 22, protocol: tcp }
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 9100, port_range_max: 9100, protocol: tcp }
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 9090, port_range_max: 9090, protocol: tcp }
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 9093, port_range_max: 9093, protocol: tcp }
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, protocol: icmp }

  prometheus_group:
    type: OS::Heat::ResourceGroup
    depends_on: [ sg_prometheus, scale_up_policy ]
    properties:
      count: 1
      resource_def:
        type: prometheus.yaml
        properties:
          name: prometheus-%index%
          image: { get_param: image }
          network_id: { get_resource: net }
          ssh_keys: { get_param: ssh_keys }
          security_groups: [ { get_resource: sg_prometheus}, default ]
          affinity_group: { get_resource: anti-affinity_group }
          os_username: { get_param: os_username }
          os_password: { get_param: os_password }
          os_tenant_id: { get_param: os_tenant_id }
          upscale_url: { get_attr: [scale_up_policy, signal_url] }
          downscale_url: { get_attr: [scale_down_policy, signal_url] }
          heatstack_id: { get_param: 'OS::stack_id' }

outputs:
  scale_up_url:
    description: >
      Webhook URL to scale up the group.
      You can invoke the scale-up operation by doing an HTTP POST to this URL.
    value: 
      str_replace: 
         template: { get_attr: [scale_up_policy, signal_url]}
         params:
           sys11cloud.net: cloud.syseleven.net
  scale_dn_url:
    description: >
      Webhook URL to scale down the group.
      You can invoke the scale-down operation by doing an HTTP POST to this URL.
    value: 
      str_replace: 
         template: { get_attr: [scale_down_policy, signal_url]}
         params:
           sys11cloud.net: cloud.syseleven.net

  lburl:
    value:
      str_replace:
        template: http://IP_ADDRESS:PORT
        params:
          IP_ADDRESS: { get_attr: [ floating_ip_lb, floating_ip_address ] }
          PORT: { get_param: appserver_port }
    description: >
      This URL is the "external" URL that can be used to access the load balancer.

  sec_group_connection:
    value:
      str_replace:
        template: openstack port set --security-group SECGROUP LBPORT 
        params:
          SECGROUP: { get_resource: sg_lb }
          LBPORT: { get_attr: [loadbalancer, vip_port_id ]}
    description: >
      This command can be used to connect security groups to the 
      load balancer port. After the LB is accessible from the outside.
