description: 'This template describes two LoadBalancers and two app server with static IPs'
heat_template_version: 2014-10-16

parameters:
  ssh_keys:
    type: comma_delimited_list
  public_network_id:
    type: string
    default: caf8de33-1059-4473-a2c1-2a62d12294fa

resources:
  allow_ssh:
    type: OS::Neutron::SecurityGroup
    properties:
      description: allow incoming SSH and ICMP traffic from anywhere.
      name: allow incoming traffic, tcp port 22 and icmp
      rules: 
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 22, port_range_max: 22, protocol: tcp } 
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, protocol: icmp } 


  allow_webtraffic:
    type: OS::Neutron::SecurityGroup
    properties:
      description: allow incoming web traffic via http from anywhere. 
      name: allow incoming traffic, tcp port 80
      rules: 
        - { direction: ingress, remote_ip_prefix: 0.0.0.0/0, port_range_min: 80, port_range_max: 80, protocol: tcp } 
  
  int_network:
    type: OS::Neutron::Net
    properties:
      name: internal_network

  int_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: {"network": { get_param: public_network_id }}
      name: lbandlamp-router

  int_subnet:
    type: OS::Neutron::Subnet
    properties:
      allocation_pools:
      - { start: "10.0.10.10", end: "10.0.10.240" }
      cidr: "10.0.10.0/24"
      dns_nameservers: [37.123.105.116, 37.123.105.117]
      gateway_ip: 10.0.10.1
      ip_version: 4
      name: internal_subnet
      network_id: { get_resource: int_network }

  router_subnet_connect:
    type: OS::Neutron::RouterInterface
    depends_on: [int_subnet, int_router]
    properties:
      router_id: { get_resource: int_router }
      subnet: { get_resource: int_subnet }

  AppServer_A:
    type: OS::Heat::ResourceGroup
    depends_on: [ int_network, int_subnet, router_subnet_connect ]
    properties:
      resource_def:
        type: ServerAPP.yaml
        properties:
          name: "App_Server_A"
          int_network: { get_resource: int_network }
          flavor: "m1.medium"
          image: "Ubuntu 16.04 sys11-cloudimg amd64"
          static_ip: "10.0.10.241"
          port_name: "PortAppA"
          int_subnet: { get_resource: int_subnet }
          ssh_keys: { get_param: ssh_keys }
          allow_ssh: { get_resource: allow_ssh }
          allow_webtraffic: { get_resource: allow_webtraffic }

  AppServer_B:
    type: OS::Heat::ResourceGroup
    depends_on: [ int_network, int_subnet, router_subnet_connect ]
    properties:
      resource_def:
        type: ServerAPP.yaml
        properties:
          name: "App_Server_B"
          int_network: { get_resource: int_network }
          flavor: "m1.medium"
          image: "Ubuntu 16.04 sys11-cloudimg amd64"
          static_ip: "10.0.10.242"
          port_name: "PortAppB"
          int_subnet: { get_resource: int_subnet }
          ssh_keys: { get_param: ssh_keys }
          allow_ssh: { get_resource: allow_ssh }
          allow_webtraffic: { get_resource: allow_webtraffic }

  LBserver_A:
    type: OS::Heat::ResourceGroup
    depends_on: [ int_network, int_subnet, router_subnet_connect ]
    properties:
      resource_def:
        type: ServerLB.yaml
        properties:
          name: "LB_Server_A"
          int_network: { get_resource: int_network }
          flavor: "m1.medium"
          image: "Ubuntu 16.04 sys11-cloudimg amd64"
          static_ip: "10.0.10.251"
          port_name: "PortLbA"
          int_subnet: { get_resource: int_subnet }
          ssh_keys: { get_param: ssh_keys }
          allow_ssh: { get_resource: allow_ssh }
          allow_webtraffic: { get_resource: allow_webtraffic }

  LBserver_B:
    type: OS::Heat::ResourceGroup
    depends_on: [ int_network, int_subnet, router_subnet_connect ]
    properties:
      resource_def:
        type: ServerLB.yaml
        properties:
          name: "LB_Server_B"
          int_network: { get_resource: int_network }
          flavor: "m1.medium"
          image: "Ubuntu 16.04 sys11-cloudimg amd64"
          static_ip: "10.0.10.252"
          port_name: "PortLbB"
          int_subnet: { get_resource: int_subnet }
          ssh_keys: { get_param: ssh_keys }
          allow_ssh: { get_resource: allow_ssh }
          allow_webtraffic: { get_resource: allow_webtraffic }