heat_template_version: 2016-04-08

description: loadbalancer using backends defined in other stacks 

parameters:

  app_port:
    type: number
  lb_port:
    type: number
  public_network:
    type: string
    description: Network used by the load balancer
    default: ext-net 
  backend1:
    type: string
    description: FIP used from region 1 (cbk)
  backend2:
    type: string
    description: FIP used from region 2 (dbl)

resources:

  syseleven_net:
    type: OS::Neutron::Net
    properties: 
      name: syseleven-net

  syseleven_subnet:
    type: OS::Neutron::Subnet
    depends_on: [ syseleven_net ]
    properties:
      name: syseleven_subnet
      dns_nameservers:
        - 8.8.8.8 
        - 4.4.4.4
      network: { get_resource: syseleven_net }
      ip_version: 4
      cidr: 192.168.2.0/24
      allocation_pools:
      - {start: 192.168.2.10, end: 192.168.2.250}

  syseleven_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info: { "network": { get_param: public_network }}

  router_subnet_connect:
    type: OS::Neutron::RouterInterface
    depends_on: [ syseleven_router, syseleven_subnet ]
    properties:
      router: { get_resource: syseleven_router }
      subnet: { get_resource: syseleven_subnet }


  sec_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - remote_ip_prefix: 0.0.0.0/0
        protocol: tcp
        port_range_min: { get_param: lb_port }
        port_range_max: { get_param: lb_port }

  monitor:
    type: OS::Neutron::LBaaS::HealthMonitor
    depends_on: [ pool ]
    properties:
      delay: 3
      type: TCP 
      timeout: 2
      max_retries: 3
      pool: { get_resource: pool }

  pool:
    type: OS::Neutron::LBaaS::Pool
    depends_on: [ listener ]
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: TCP 
      listener: { get_resource: listener }

  listener:
    type: OS::Neutron::LBaaS::Listener
    depends_on: [ loadbalancer ]
    properties:
      loadbalancer: { get_resource: loadbalancer }
      protocol: TCP 
      protocol_port: { get_param: lb_port }

  loadbalancer:
    depends_on: [ router_subnet_connect ]
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
      vip_subnet: { get_resource: syseleven_subnet }

  floating_ip:
    type: OS::Neutron::FloatingIP
    depends_on: [ loadbalancer ]
    properties:
      floating_network: { get_param: public_network }
      port_id: { get_attr: [ loadbalancer, vip_port_id ] }

  pool_member1:
    type: OS::Neutron::LBaaS::PoolMember
    depends_on: [ pool, syseleven_subnet ]
    properties:
      pool: { get_resource: pool }
      address: { get_param: backend1 } 
      protocol_port: { get_param: app_port } 
      subnet: { get_resource: syseleven_subnet } 

  pool_member2:
    type: OS::Neutron::LBaaS::PoolMember
    depends_on: [ pool, syseleven_subnet ]
    properties:
      pool: { get_resource: pool }
      address: { get_param: backend2 } 
      protocol_port: { get_param: app_port }
      subnet: { get_resource: syseleven_subnet } 

outputs:

  lb_fip:
    value: { get_attr: [ floating_ip, floating_ip_address ] }
  lb_network_port:
    value: { get_attr: [ loadbalancer, vip_port_id ] }
  lb_secgroup:
    value: { get_resource: sec_group }
  assign_sec_group:
    value:
      str_replace:
        template: openstack port set  --security-group SECGROUP LBPORT 
        params:
          SECGROUP: { get_resource: sec_group }
          LBPORT: { get_attr: [ loadbalancer, vip_port_id ] }
    description: >
      This command can be used to connect security groups to the 
      load balancer port. The LB is accessible from the outside once
      the security group is assigned.

